{"version":3,"file":"static/js/326.3bf134b5.chunk.js","mappings":"kQASA,MAwGA,EAxGoBA,KAClB,MAAQC,KAAMC,IAAaC,EAAAA,EAAAA,OACpBC,GAAY,UAAEC,KAAeC,EAAAA,EAAAA,MAwB9BC,EAAc,IAAIC,OACtB,0FAGIC,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbC,KAAM,GACNC,OAAQ,IAEVC,iBAAkBC,EAAAA,GAAW,CAC3BH,KAAMG,EAAAA,KACHC,QACC,yHACA,0IAGDC,SAAS,YACZJ,OAAQE,EAAAA,KACLC,QACCT,EACA,gGAEDW,IAAI,IACJD,SAAS,cAEdE,SA/CeC,UACf,IACE,GACElB,EAASmB,MACPC,GACEA,EAAQV,KAAKW,sBACbd,EAAOe,OAAOZ,KAAKW,sBAGvB,MAAM,IAAIE,MAAM,GAADC,OAAIjB,EAAOe,OAAOZ,KAAI,4BAIvC,UAFqBR,EAAWH,IAErB0B,MAAO,MAAM,IAAIF,MAAM,yBAElCG,EAAAA,GAAMC,QAAQ,8BACdpB,EAAOqB,aACT,CAAE,MAAOH,GACPC,EAAAA,GAAMD,MAAMA,EAAMI,QACpB,KA+BF,OACEC,EAAAA,EAAAA,MAACC,EAAAA,EAAG,CACFC,UAAU,OACVf,SAAUV,EAAO0B,aACjBC,GAAI,CACFC,GAAI,EACJC,QAAS,OACTC,cAAe,SACfC,WAAY,UACZC,SAAA,EAEFC,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CACRC,OAAO,SACP3B,UAAQ,EACR4B,WAAS,EACTC,GAAG,OACHC,MAAM,OACNnC,KAAK,OACLoC,MAAOvC,EAAOe,OAAOZ,KACrBqC,SAAUxC,EAAOyC,aACjBC,OAAQ1C,EAAO2C,WACfzB,MAAO0B,QAAQ5C,EAAO6C,QAAQ1C,MAAQH,EAAO8C,OAAO3C,MACpD4C,WAAY/C,EAAO6C,QAAQ1C,MAAQH,EAAO8C,OAAO3C,QAEnD8B,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CACRC,OAAO,SACP3B,UAAQ,EACR4B,WAAS,EACTjC,KAAK,SACLmC,MAAM,SACNU,KAAK,MACLX,GAAG,SACHE,MAAOvC,EAAOe,OAAOX,OACrBoC,SAAUxC,EAAOyC,aACjBC,OAAQ1C,EAAO2C,WACfzB,MAAO0B,QAAQ5C,EAAO6C,QAAQzC,QAAUJ,EAAO8C,OAAO1C,QACtD2C,WAAY/C,EAAO6C,QAAQzC,QAAUJ,EAAO8C,OAAO1C,UAErD6B,EAAAA,EAAAA,KAACgB,EAAAA,EAAM,CACLD,KAAK,SACLE,QAAQ,YACRvB,GAAI,CAAEC,GAAI,EAAGuB,GAAI,EAAGC,UAAW,UAC/BC,SAAUzD,EAAUoC,SACrB,kBAGG,E,mFCtGV,MAiCA,EAjCoBsB,IAA2B,IAA1B,GAAEjB,EAAE,KAAElC,EAAI,OAAEC,GAAQkD,EACvC,MAAOC,GAAe,UAAE3D,EAAS,UAAE4D,KAAeC,EAAAA,EAAAA,MAMlD,OAJAC,EAAAA,EAAAA,YAAU,KACJF,GAAWrC,EAAAA,GAAMC,QAAQ,uCAAuC,GACnE,CAACoC,KAGFvB,EAAAA,EAAAA,KAAC0B,EAAAA,GAAQ,CACPC,iBACE3B,EAAAA,EAAAA,KAAA4B,EAAAA,SAAA,CAAA7B,UACEC,EAAAA,EAAAA,KAAC6B,EAAAA,EAAU,CACTC,KAAK,MACL,aAAW,SACXV,SAAUzD,EACVoE,QAASA,IAAMT,EAAclB,GAAIL,UAEjCC,EAAAA,EAAAA,KAACgC,EAAAA,EAAU,QAGhBjC,UAEDC,EAAAA,EAAAA,KAACiC,EAAAA,EAAY,CAACC,QAAShE,EAAMiE,UAAWhE,KAC/B,E,wBCrBf,MA8CA,EAvBoBiE,KAClB,MAAM,KAAE7E,EAAI,iBAAE8E,EAAgB,MAAEpD,EAAK,UAAEtB,GAxBrB2E,MAClB,MAAMC,GAASC,EAAAA,EAAAA,IAAYC,EAAAA,IAErBC,GAAyBC,EAAAA,EAAAA,UAAQ,KAC9BC,EAAAA,EAAAA,IACL,CAACC,GAAOA,EAAItF,KAAM,CAACuF,EAAGP,IAAWA,IACjC,CAAChF,EAAMgF,KAAM,IAAAQ,EAAA,OAKC,QALDA,EACP,OAAJxF,QAAI,IAAJA,OAAI,EAAJA,EACIgF,QAAOlB,IAAA,IAAC,KAAEnD,GAAMmD,EAAA,OAChBnD,EAAK8E,cAAcC,SAASV,EAAOS,cAAc,IAElDE,iBAAS,IAAAH,EAAAA,EAAI,EAAE,KAErB,IAEH,OAAOtF,EAAAA,EAAAA,SAAoB0F,EAAW,CACpCC,iBAAkBC,IAAM,IACnBA,EACHhB,iBAAkBK,EAAuBW,EAAQd,MAEnD,EAImDD,GAErD,OAAI3E,GAAkBqC,EAAAA,EAAAA,KAACsD,EAAAA,EAAO,CAACC,OAAQ,IAAKC,MAAO,MAE/CvE,GAAce,EAAAA,EAAAA,KAAA,KAAAD,SAAG,4BAEA,KAAb,OAAJxC,QAAI,IAAJA,OAAI,EAAJA,EAAMkG,SAAqBzD,EAAAA,EAAAA,KAAA,KAAAD,SAAG,iBAGhCC,EAAAA,EAAAA,KAAC0D,EAAAA,EAAI,CACHhE,GAAI,CACFiE,SAAU,OACVC,UAAW,KACX7D,SAEe,OAAhBsC,QAAgB,IAAhBA,OAAgB,EAAhBA,EAAkBwB,KAAIjF,IACrBoB,EAAAA,EAAAA,KAAC8D,EAAW,IAAsBlF,GAAhBA,EAAQwB,OAEvB,ECvBX,EAxBe2D,KACb,MAAMzD,GAAQkC,EAAAA,EAAAA,IAAYC,EAAAA,IACpBuB,GAAWC,EAAAA,EAAAA,MAMjB,OACEjE,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CACRE,WAAS,EACTC,GAAG,kBACHC,MAAM,SACNU,KAAK,SACLE,QAAQ,WACR/C,KAAK,SACLgG,QAAQ,yHACRC,MAAM,yIACN7D,MAAOA,EACPC,SAfmB6D,IACrBJ,GAASK,EAAAA,EAAAA,IAAaD,EAAME,OAAOhE,OAAO,GAexC,E,8BCtBmBiE,EAAAA,GAAOC,IAAGC,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,+DAA5B,MAKMC,EAAQJ,EAAAA,GAAOK,GAAEC,IAAAA,GAAAH,EAAAA,EAAAA,GAAA,sDAKjBI,EAAYP,EAAAA,GAAOQ,GAAEC,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,6BCqBlC,EA3BiBO,KAEb3F,EAAAA,EAAAA,MAAA,OAAAS,SAAA,EACEC,EAAAA,EAAAA,KAAC2E,EAAK,CAAA5E,SAAC,eAEPT,EAAAA,EAAAA,MAAC4F,EAAAA,GAAI,CACHC,WAAS,EACTC,UAAU,MACVC,eAAe,SACfvF,WAAW,aACXwF,cAAe,GAAGvF,SAAA,EAElBT,EAAAA,EAAAA,MAAC4F,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,EAAEzF,SAAA,EACfC,EAAAA,EAAAA,KAAC8E,EAAS,CAAA/E,SAAC,oBACXC,EAAAA,EAAAA,KAAC1C,EAAW,QAGdgC,EAAAA,EAAAA,MAAC4F,EAAAA,GAAI,CAACK,MAAI,EAACC,GAAI,EAAEzF,SAAA,EACfC,EAAAA,EAAAA,KAAC8E,EAAS,CAAA/E,SAAC,cACXC,EAAAA,EAAAA,KAAC+D,EAAM,KACP/D,EAAAA,EAAAA,KAACoC,EAAW,Y","sources":["components/ContactForm/ContactForm.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","pages/Contacts/Contacts.styled.js","pages/Contacts/Contacts.jsx"],"sourcesContent":["import { toast } from 'react-toastify';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport {\n  useAddContactMutation,\n  useGetContactsQuery,\n} from 'services/contactsApi';\nimport { Box, Button, TextField } from '@mui/material';\n\nconst ContactForm = () => {\n  const { data: contacts } = useGetContactsQuery();\n  const [addContact, { isLoading }] = useAddContactMutation();\n\n  const onSubmit = async data => {\n    try {\n      if (\n        contacts.find(\n          contact =>\n            contact.name.toLocaleLowerCase() ===\n            formik.values.name.toLocaleLowerCase()\n        )\n      )\n        throw new Error(`${formik.values.name} is already in contacts`);\n\n      const result = await addContact(data);\n\n      if (result.error) throw new Error('Failed to add contact');\n\n      toast.success('Contact added successfully');\n      formik.handleReset();\n    } catch (error) {\n      toast.error(error.message);\n    }\n  };\n\n  const numberRegex = new RegExp(\n    '\\\\+?\\\\d{1,4}?[-.\\\\s]?\\\\(?\\\\d{1,3}?\\\\)?[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,9}'\n  );\n\n  const formik = useFormik({\n    initialValues: {\n      name: '',\n      number: '',\n    },\n    validationSchema: Yup.object({\n      name: Yup.string()\n        .matches(\n          \"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\",\n          \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        )\n\n        .required('Required'),\n      number: Yup.string()\n        .matches(\n          numberRegex,\n          'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n        )\n        .max(13)\n        .required('Required'),\n    }),\n    onSubmit,\n  });\n\n  return (\n    <Box\n      component=\"form\"\n      onSubmit={formik.handleSubmit}\n      sx={{\n        mt: 1,\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center',\n      }}\n    >\n      <TextField\n        margin=\"normal\"\n        required\n        fullWidth\n        id=\"name\"\n        label=\"Name\"\n        name=\"name\"\n        value={formik.values.name}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        error={Boolean(formik.touched.name && formik.errors.name)}\n        helperText={formik.touched.name && formik.errors.name}\n      />\n      <TextField\n        margin=\"normal\"\n        required\n        fullWidth\n        name=\"number\"\n        label=\"Number\"\n        type=\"tel\"\n        id=\"number\"\n        value={formik.values.number}\n        onChange={formik.handleChange}\n        onBlur={formik.handleBlur}\n        error={Boolean(formik.touched.number && formik.errors.number)}\n        helperText={formik.touched.number && formik.errors.number}\n      />\n      <Button\n        type=\"submit\"\n        variant=\"contained\"\n        sx={{ mt: 3, mb: 2, textAlign: 'center' }}\n        disabled={isLoading}\n      >\n        Add contact\n      </Button>\n    </Box>\n  );\n};\n\nexport default ContactForm;\n","import { IconButton, ListItem, ListItemText } from '@mui/material';\nimport { toast } from 'react-toastify';\nimport PropTypes from 'prop-types';\nimport { useEffect } from 'react';\nimport { useDeleteContactMutation } from 'services/contactsApi';\nimport DeleteIcon from '@mui/icons-material/Delete';\n\nconst ContactItem = ({ id, name, number }) => {\n  const [deleteContact, { isLoading, isSuccess }] = useDeleteContactMutation();\n\n  useEffect(() => {\n    if (isSuccess) toast.success('The contact was successfully deleted');\n  }, [isSuccess]);\n\n  return (\n    <ListItem\n      secondaryAction={\n        <>\n          <IconButton\n            edge=\"end\"\n            aria-label=\"delete\"\n            disabled={isLoading}\n            onClick={() => deleteContact(id)}\n          >\n            <DeleteIcon />\n          </IconButton>\n        </>\n      }\n    >\n      <ListItemText primary={name} secondary={number} />\n    </ListItem>\n  );\n};\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n\nexport default ContactItem;\n","import { createSelector } from '@reduxjs/toolkit';\nimport { useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useGetContactsQuery } from 'services/contactsApi';\nimport { getFilter } from 'redux/contacts/filterSlice';\nimport ContactItem from 'components/ContactItem';\nimport { List } from '@mui/material';\nimport { Spinner } from 'components/Spinner';\n\nconst useContacts = () => {\n  const filter = useSelector(getFilter);\n\n  const selectFilteredContacts = useMemo(() => {\n    return createSelector(\n      [res => res.data, (_, filter) => filter],\n      (data, filter) =>\n        data\n          ?.filter(({ name }) =>\n            name.toLowerCase().includes(filter.toLowerCase())\n          )\n          .reverse() ?? []\n    );\n  }, []);\n\n  return useGetContactsQuery(undefined, {\n    selectFromResult: result => ({\n      ...result,\n      filteredContacts: selectFilteredContacts(result, filter),\n    }),\n  });\n};\n\nconst ContactList = () => {\n  const { data, filteredContacts, error, isLoading } = useContacts();\n\n  if (isLoading) return <Spinner height={120} width={120} />;\n\n  if (error) return <p>Failed to load contacts</p>;\n\n  if (data?.length === 0) return <p>No contacts</p>;\n\n  return (\n    <List\n      sx={{\n        overflow: 'auto',\n        maxHeight: 350,\n      }}\n    >\n      {filteredContacts?.map(contact => (\n        <ContactItem key={contact.id} {...contact} />\n      ))}\n    </List>\n  );\n};\n\nexport default ContactList;\n","import { TextField } from '@mui/material';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getFilter, updateFilter } from 'redux/contacts/filterSlice';\n\nconst Filter = () => {\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const onFilterChange = event => {\n    dispatch(updateFilter(event.target.value));\n  };\n\n  return (\n    <TextField\n      fullWidth\n      id=\"standard-search\"\n      label=\"Search\"\n      type=\"search\"\n      variant=\"standard\"\n      name=\"filter\"\n      pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n      title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n      value={value}\n      onChange={onFilterChange}\n    />\n  );\n};\n\nexport default Filter;\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n`;\n\nexport const Title = styled.h1`\n  text-align: center;\n  margin-top: 30px;\n`;\n\nexport const TitleForm = styled.h2`\n  margin: 25px 0;\n`;\n","import { Grid } from '@mui/material';\nimport ContactForm from 'components/ContactForm';\nimport ContactList from 'components/ContactList';\nimport Filter from 'components/Filter';\nimport { Title, TitleForm } from './Contacts.styled';\n\nconst Contacts = () => {\n  return (\n    <div>\n      <Title>Phonebook</Title>\n\n      <Grid\n        container\n        direction=\"row\"\n        justifyContent=\"center\"\n        alignItems=\"flex-start\"\n        columnSpacing={12}\n      >\n        <Grid item xs={3}>\n          <TitleForm>Create contact</TitleForm>\n          <ContactForm />\n        </Grid>\n\n        <Grid item xs={3}>\n          <TitleForm>Contacts</TitleForm>\n          <Filter />\n          <ContactList />\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default Contacts;\n"],"names":["ContactForm","data","contacts","useGetContactsQuery","addContact","isLoading","useAddContactMutation","numberRegex","RegExp","formik","useFormik","initialValues","name","number","validationSchema","Yup","matches","required","max","onSubmit","async","find","contact","toLocaleLowerCase","values","Error","concat","error","toast","success","handleReset","message","_jsxs","Box","component","handleSubmit","sx","mt","display","flexDirection","alignItems","children","_jsx","TextField","margin","fullWidth","id","label","value","onChange","handleChange","onBlur","handleBlur","Boolean","touched","errors","helperText","type","Button","variant","mb","textAlign","disabled","_ref","deleteContact","isSuccess","useDeleteContactMutation","useEffect","ListItem","secondaryAction","_Fragment","IconButton","edge","onClick","DeleteIcon","ListItemText","primary","secondary","ContactList","filteredContacts","useContacts","filter","useSelector","getFilter","selectFilteredContacts","useMemo","createSelector","res","_","_data$filter$reverse","toLowerCase","includes","reverse","undefined","selectFromResult","result","Spinner","height","width","length","List","overflow","maxHeight","map","ContactItem","Filter","dispatch","useDispatch","pattern","title","event","updateFilter","target","styled","div","_templateObject","_taggedTemplateLiteral","Title","h1","_templateObject2","TitleForm","h2","_templateObject3","Contacts","Grid","container","direction","justifyContent","columnSpacing","item","xs"],"sourceRoot":""}